<?xml version="1.0" encoding="utf-8" ?>
<CodeSnippets  xmlns="http://schemas.microsoft.com/VisualStudio/2005/CodeSnippet">
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>Define a string DependencyProperty</Title>
      <Shortcut>propdps</Shortcut>
      <Description>Code snippet for a string property using DependencyProperty as the backing store</Description>
      <Author>Leonard T. Erwine</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>property</ID>
          <ToolTip>Property Name</ToolTip>
          <Default>MyProperty</Default>
        </Literal>
        <Literal>
          <ID>ownerclass</ID>
          <Function>ClassName()</Function>
          <ToolTip>The owning class of this Property.  Typically the class that it is declared in.</ToolTip>
        </Literal>
        <Literal>
          <ID>defaultvalue</ID>
          <ToolTip>The default value for this property.</ToolTip>
          <Default>""</Default>
        </Literal>
      </Declarations>
      <Imports>
        <Import>
          <Namespace>System</Namespace>
        </Import>
        <Import>
          <Namespace>System.Windows</Namespace>
        </Import>
      </Imports>
      <References>
        <Reference>
          <Assembly>WindowsBase</Assembly>
        </Reference>
      </References>
      <Code Language="csharp">
        <![CDATA[
#region $property$ Property Members

// /// <summary>
// /// Occurs when the value of <see cref="$property$"/> has changed.
// /// </summary>
// public event EventHandler $property$PropertyChanged;

/// <summary>
/// Defines the name for the <see cref="$property$"/> dependency property.
/// </summary>
public const string DependencyPropertyName_$property$ = "$property$";

/// <summary>
/// Identifies the <see cref="$property$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $property$Property = DependencyProperty.Register(DependencyPropertyName_$property$, typeof(string), typeof($ownerclass$),
        new PropertyMetadata($defaultvalue$,
            (DependencyObject d, DependencyPropertyChangedEventArgs e) => (d as $ownerclass$).$property$_PropertyChanged(e.OldValue as string, e.NewValue as string),
            (DependencyObject d, object baseValue) => (d as $ownerclass$).$property$_CoerceValue(baseValue)));

// TODO: Add summary documentation to the $property$ Property.
/// <summary>
/// 
/// </summary>
public string $property$
{
    get { return GetValue($property$Property) as string; }
    set { SetValue($property$Property, value); }
}

/// <summary>
/// This gets called after the value associated with the <see cref="$property$"/> dependency property has changed.
/// </summary>
/// <param name="oldValue">The <seealso cref="string"/> value before the <see cref="$property$"/> property was changed.</param>
/// <param name="newValue">The <seealso cref="string"/> value after the <see cref="$property$"/> property was changed.</param>
protected virtual void $property$_PropertyChanged(string oldValue, string newValue)
{
    // TODO: Implement $ownerclass$.$property$_PropertyChanged(string, string)
    // $property$PropertyChanged?.Invoke(this, EventArgs.Empty);
}

/// <summary>
/// This gets called whenever <see cref="$property$"/> is being re-evaluated, or coercion is specifically requested.
/// </summary>
/// <param name="baseValue">The new value of the property, prior to any coercion attempt.</param>
/// <returns>The coerced value.</returns>
public virtual string $property$_CoerceValue(object baseValue)
{
    // TODO: Implement $ownerclass$.$property$_CoerceValue(DependencyObject, object)
    return (baseValue as string) ?? "";
}

#endregion
$end$]]>
      </Code>
    </Snippet>
  </CodeSnippet>
</CodeSnippets>
