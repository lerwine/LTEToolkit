<?xml version="1.0" encoding="utf-8" ?>
<CodeSnippets  xmlns="http://schemas.microsoft.com/VisualStudio/2005/CodeSnippet">
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>Class implementing IList&lt;T&gt; and IList</Title>
      <Shortcut>ilist</Shortcut>
      <Description>Defines a class that implements IList&lt;T&gt; and IList</Description>
      <Author>Leonard T. Erwine</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>className</ID>
          <ToolTip>Class Name</ToolTip>
          <Default>MyList</Default>
        </Literal>
        <Literal>
          <ID>elementType</ID>
          <ToolTip>Element Type</ToolTip>
          <Default>T</Default>
        </Literal>
      </Declarations>
      <Imports>
        <Import>
          <Namespace>System</Namespace>
        </Import>
        <Import>
          <Namespace>System.Collections</Namespace>
        </Import>
        <Import>
          <Namespace>System.Collections.Generic</Namespace>
        </Import>
        <Import>
          <Namespace>System.Linq</Namespace>
        </Import>
        <Import>
          <Namespace>System.Threading</Namespace>
        </Import>
      </Imports>
      <Code Language="csharp">
<![CDATA[
public class $className$<$elementType$> : IList<$elementType$>, IList
{
    private readonly object _syncRoot;
    //private readonly List<$elementType$> _innerList = new List<$elementType$>();

    public $className$(IEnumerable<$elementType$> collection)
    {
        _syncRoot = new object();
        $end//_syncRoot = (collection != null && ((IList)_innerList).IsSynchronized) ? (((IList)_innerList).SyncRoot ?? new object()) : new object();
        //if (collection != null)
        //    _innerList.AddRange(collection.Where(i => i != null));
    }

    public $className$(params $elementType$[] list) : this((IEnumerable<$elementType$>)list) { }

    public $className$() : this(null as IEnumerable<$elementType$>) { }

    public $elementType$ this[int index]
    {
        get => throw new NotImplementedException(); // _innerList[index];
        set
        {
            if (value == null)
                throw new ArgumentNullException();

            Monitor.Enter(_syncRoot);
            try { throw new NotImplementedException(); }
            //try { _innerList[index] = value; }
            finally { Monitor.Exit(_syncRoot); }
        }
    }

    object IList.this[int index] { get => this[index]; set => this[index] = ($elementType$)value; }

    public int Count => throw new NotImplementedException(); // _innerList.Count;

    protected internal object SyncRoot => _syncRoot;
        
    bool ICollection<$elementType$>.IsReadOnly => throw new NotImplementedException();

    bool IList.IsReadOnly => false;

    bool IList.IsFixedSize => false;

    object ICollection.SyncRoot => _syncRoot;

    bool ICollection.IsSynchronized => true;

    public void Add($elementType$ item)
    {
        if (item == null)
            throw new ArgumentNullException("item");

        Monitor.Enter(_syncRoot);
        try { throw new NotImplementedException(); }
        //try { _innerList.Add(item); }
        finally { Monitor.Exit(_syncRoot); }
    }

    int IList.Add(object value)
    {
        if (value == null)
            throw new ArgumentNullException("value");

        //int index;

        Monitor.Enter(_syncRoot);
        try
        {
            throw new NotImplementedException();
            //index = _innerList.Count;
            //Add(($elementType$)value);
        }
        finally { Monitor.Exit(_syncRoot); }

        //return index;
    }

    public void Clear()
    {
        Monitor.Enter(_syncRoot);
        try { throw new NotImplementedException(); }
        //try { _innerList.Clear(); }
        finally { Monitor.Exit(_syncRoot); }
    }

    public bool Contains($elementType$ item) => throw new NotImplementedException(); // item != null && _innerList.Contains(item);

    bool IList.Contains(object value) => throw new NotImplementedException(); // value != null && value is $elementType$ && Contains(($elementType$)value);

    public void CopyTo($elementType$[] array, int arrayIndex) => throw new NotImplementedException(); // _innerList.CopyTo(array, arrayIndex);

    void ICollection.CopyTo(Array array, int index) => throw new NotImplementedException(); // _innerList.ToArray().CopyTo(array, index);

    public IEnumerator<$elementType$> GetEnumerator() => throw new NotImplementedException(); // _innerList.GetEnumerator();

    IEnumerator IEnumerable.GetEnumerator() => throw new NotImplementedException(); // _innerList.GetEnumerator();

    public int IndexOf($elementType$ item) => (item == null) ? -1 : throw new NotImplementedException(); // _innerList.IndexOf(item);

    int IList.IndexOf(object value) => (value != null && value is $elementType$) ? IndexOf(($elementType$)value) : -1;

    public void Insert(int index, $elementType$ item)
    {
        if (item == null)
            throw new ArgumentNullException("item");

        Monitor.Enter(_syncRoot);
        try { throw new NotImplementedException(); }
        //try { _innerList.Insert(index, item); }
        finally { Monitor.Exit(_syncRoot); }
    }

    void IList.Insert(int index, object value)
    {
        if (value == null)
            throw new ArgumentNullException("value");
        Insert(index, ($elementType$)value);
    }

    public bool Remove($elementType$ item)
    {
        if (item == null)
            return false;
        Monitor.Enter(_syncRoot);
        try { throw new NotImplementedException(); }
        //try { return _innerList.Remove(item); }
        finally { Monitor.Exit(_syncRoot); }
    }

    void IList.Remove(object value)
    {
        if (value != null && value is $elementType$)
            Remove(($elementType$)value);
    }

    public void RemoveAt(int index)
    {
        Monitor.Enter(_syncRoot);
        try { throw new NotImplementedException(); }
        //try { _innerList.RemoveAt(index); }
        finally { Monitor.Exit(_syncRoot); }
    }
}
]]>
      </Code>
    </Snippet>
  </CodeSnippet>
</CodeSnippets>
